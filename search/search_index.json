{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to SUMO2GRAL Documentation Introduction SUMO2GRAL (S2G) is a project aimed at simplifying the workflow of estimating pollutant concentrations in urban areas by automating the simulation process in GRAL (Graz Lagrangian Model) . By providing geographic area specifications or an Open Street Map (OSM) file, SUMO (Simulation of Urban MObility) emissions files , and weather data for the desired area, users can effortlessly perform GRAL simulations and obtain pollutant concentrations for the studied area. The weather data format aligns with the format provided by the monitor stations of Valencian Environmental Agency . Key Features Automated Data Processing : Streamlines the preparation of GRAL input files by processing building, weather, highway, and map data automatically. Georeferenced Map Generation : Facilitates the creation of accurate and detailed maps based on specific geographic boundaries. Shapefile Production : Generates essential shapefiles for buildings and highways, which are crucial for conducting GRAL simulations. Weather Data Handling : Adapts meteorological data to fit GRAL's simulation requirements, ensuring realistic environmental conditions are modeled. GRAL File Automation : Simplifies the creation of GRAL-specific simulation files, enabling users to focus on analysis rather than manual file preparation. Integrated GRAL Simulation : Directly executes GRAL simulations, offering a seamless workflow from traffic modeling to pollutant dispersion analysis. Getting Started To begin using SUMO2GRAL, ensure you have all prerequisites installed, and follow the setup instructions . For detailed information on how to use SUMO2GRAL, refer to the usage guidelines . Contributing We welcome contributions from the community! If you're interested in improving SUMO2GRAL or adding new features, please see our contributing guidelines . Thank you for choosing SUMO2GRAL to support your urban planning and environmental research needs!","title":"Home"},{"location":"#welcome-to-sumo2gral-documentation","text":"","title":"Welcome to SUMO2GRAL Documentation"},{"location":"#introduction","text":"SUMO2GRAL (S2G) is a project aimed at simplifying the workflow of estimating pollutant concentrations in urban areas by automating the simulation process in GRAL (Graz Lagrangian Model) . By providing geographic area specifications or an Open Street Map (OSM) file, SUMO (Simulation of Urban MObility) emissions files , and weather data for the desired area, users can effortlessly perform GRAL simulations and obtain pollutant concentrations for the studied area. The weather data format aligns with the format provided by the monitor stations of Valencian Environmental Agency .","title":"Introduction"},{"location":"#key-features","text":"Automated Data Processing : Streamlines the preparation of GRAL input files by processing building, weather, highway, and map data automatically. Georeferenced Map Generation : Facilitates the creation of accurate and detailed maps based on specific geographic boundaries. Shapefile Production : Generates essential shapefiles for buildings and highways, which are crucial for conducting GRAL simulations. Weather Data Handling : Adapts meteorological data to fit GRAL's simulation requirements, ensuring realistic environmental conditions are modeled. GRAL File Automation : Simplifies the creation of GRAL-specific simulation files, enabling users to focus on analysis rather than manual file preparation. Integrated GRAL Simulation : Directly executes GRAL simulations, offering a seamless workflow from traffic modeling to pollutant dispersion analysis.","title":"Key Features"},{"location":"#getting-started","text":"To begin using SUMO2GRAL, ensure you have all prerequisites installed, and follow the setup instructions . For detailed information on how to use SUMO2GRAL, refer to the usage guidelines .","title":"Getting Started"},{"location":"#contributing","text":"We welcome contributions from the community! If you're interested in improving SUMO2GRAL or adding new features, please see our contributing guidelines . Thank you for choosing SUMO2GRAL to support your urban planning and environmental research needs!","title":"Contributing"},{"location":"contributing/","text":"Contributing to SUMO2GRAL We warmly welcome contributions from the community to the SUMO2GRAL project! Whether it's improving the code, fixing bugs, or enhancing documentation, your help can make a significant difference. Ways to Contribute Reporting Bugs : If you find a bug in the software, please report it through the GitHub issue tracker. Be sure to include detailed information about the bug and steps to reproduce it. Suggesting Enhancements : Have ideas on how to make SUMO2GRAL better? We'd love to hear your suggestions! Please submit them as \"Feature Request\" issues on GitHub. Documentation : Good documentation is just as important as good code. If you spot errors, omissions, or areas that could use clearer explanations, please propose your changes or write to us. Code Contributions : If you're interested in fixing issues or adding new features, follow the steps below to get started. Getting Started Fork the Repository : Start by forking the SUMO2GRAL repository to your GitHub account. Clone Your Fork : Clone your fork to your local machine to start making changes: bash git clone https://github.com/your-username/SUMO2GRAL.git cd SUMO2GRAL Create a New Branch : It's best to create a new branch for your changes: bash git checkout -b your-feature-branch-name Make Your Changes : Implement your fix or feature, adhering to the project's coding standards. Test Your Changes : Ensure your changes don't break existing functionality and, if possible, add new tests to cover your contributions. Commit Your Changes : Write clear, concise commit messages that explain your changes: bash git commit -am 'Add some feature' Push to Your Fork : Push your changes to your fork on GitHub: bash git push origin your-feature-branch-name Submit a Pull Request : Go to the SUMO2GRAL repository on GitHub, and you'll see a prompt to submit a pull request. Fill in the details, explaining the purpose of your changes. Review Process Once you submit a pull request, the project maintainers will review your changes. They may suggest modifications or ask for further details. This is a collaborative process, so feedback is not only welcomed but encouraged! Code of Conduct We expect all contributors to adhere to the Contributor Covenant Code of Conduct . Respectful and constructive interactions are the foundation of our community. Questions? If you have any questions or need further guidance, feel free to reach out to the project maintainers or open an issue for general questions. Thank you for considering contributing to SUMO2GRAL. Your efforts help make this project better for everyone!","title":"Contributing"},{"location":"contributing/#contributing-to-sumo2gral","text":"We warmly welcome contributions from the community to the SUMO2GRAL project! Whether it's improving the code, fixing bugs, or enhancing documentation, your help can make a significant difference.","title":"Contributing to SUMO2GRAL"},{"location":"contributing/#ways-to-contribute","text":"Reporting Bugs : If you find a bug in the software, please report it through the GitHub issue tracker. Be sure to include detailed information about the bug and steps to reproduce it. Suggesting Enhancements : Have ideas on how to make SUMO2GRAL better? We'd love to hear your suggestions! Please submit them as \"Feature Request\" issues on GitHub. Documentation : Good documentation is just as important as good code. If you spot errors, omissions, or areas that could use clearer explanations, please propose your changes or write to us. Code Contributions : If you're interested in fixing issues or adding new features, follow the steps below to get started.","title":"Ways to Contribute"},{"location":"contributing/#getting-started","text":"Fork the Repository : Start by forking the SUMO2GRAL repository to your GitHub account. Clone Your Fork : Clone your fork to your local machine to start making changes: bash git clone https://github.com/your-username/SUMO2GRAL.git cd SUMO2GRAL Create a New Branch : It's best to create a new branch for your changes: bash git checkout -b your-feature-branch-name Make Your Changes : Implement your fix or feature, adhering to the project's coding standards. Test Your Changes : Ensure your changes don't break existing functionality and, if possible, add new tests to cover your contributions. Commit Your Changes : Write clear, concise commit messages that explain your changes: bash git commit -am 'Add some feature' Push to Your Fork : Push your changes to your fork on GitHub: bash git push origin your-feature-branch-name Submit a Pull Request : Go to the SUMO2GRAL repository on GitHub, and you'll see a prompt to submit a pull request. Fill in the details, explaining the purpose of your changes.","title":"Getting Started"},{"location":"contributing/#review-process","text":"Once you submit a pull request, the project maintainers will review your changes. They may suggest modifications or ask for further details. This is a collaborative process, so feedback is not only welcomed but encouraged!","title":"Review Process"},{"location":"contributing/#code-of-conduct","text":"We expect all contributors to adhere to the Contributor Covenant Code of Conduct . Respectful and constructive interactions are the foundation of our community.","title":"Code of Conduct"},{"location":"contributing/#questions","text":"If you have any questions or need further guidance, feel free to reach out to the project maintainers or open an issue for general questions. Thank you for considering contributing to SUMO2GRAL. Your efforts help make this project better for everyone!","title":"Questions?"},{"location":"prerequisites/","text":"Prerequisites Before you begin using SUMO2GRAL, there are a few prerequisites you'll need to ensure are met to facilitate a smooth setup and operation. System Requirements SUMO2GRAL is designed to be cross-platform and should work on any standard operating system, including: Windows macOS Linux Software Dependencies Ensure you have the following software installed: Python: SUMO2GRAL is developed in Python, and it's necessary to have Python installed on your system. The code is compatible with Python 3.6 and above. You can download Python from python.org . Dotnet SDK: Given that GRAL simulations are executed through a .NET application, you need the Dotnet SDK, version 6.0 or higher. This is crucial for running GRAL simulations as part of the SUMO2GRAL workflow. Instructions for downloading and installing the Dotnet SDK can be found on the official .NET website . Installation Instructions For Windows Users: You can download the .NET SDK from the Windows .NET 8.0 downloading page and follow the installation prompts. For Linux Users: Most Linux distributions include a package manager that can be used to install the Dotnet SDK. For example, on Ubuntu, you can install the Dotnet SDK with the following command: bash sudo apt-get install -y dotnet-sdk-8.0 Additional Python Libraries SUMO2GRAL utilizes several Python libraries. While these dependencies will be automatically installed during the SUMO2GRAL setup process, it's good to be aware of them: pandas osmnx sumolib numpy geopandas cartopy pyproj osmium These libraries can be installed individually using pip or as part of the SUMO2GRAL setup process, which is detailed in the installation section of the main documentation. SUMO Installation As SUMO2GRAL interacts with SUMO for traffic simulation data, ensure that SUMO (Simulation of Urban MObility) is installed and properly configured on your system. Instructions for installing SUMO can be found on the official SUMO website . Once all prerequisites are met, you can proceed with the installation of SUMO2GRAL and begin setting up your urban pollutant dispersion simulations. If you encounter any issues during the installation or setup process, please refer to the troubleshooting section or reach out to the community for support.","title":"Pre-requisites"},{"location":"prerequisites/#prerequisites","text":"Before you begin using SUMO2GRAL, there are a few prerequisites you'll need to ensure are met to facilitate a smooth setup and operation.","title":"Prerequisites"},{"location":"prerequisites/#system-requirements","text":"SUMO2GRAL is designed to be cross-platform and should work on any standard operating system, including: Windows macOS Linux","title":"System Requirements"},{"location":"prerequisites/#software-dependencies","text":"Ensure you have the following software installed: Python: SUMO2GRAL is developed in Python, and it's necessary to have Python installed on your system. The code is compatible with Python 3.6 and above. You can download Python from python.org . Dotnet SDK: Given that GRAL simulations are executed through a .NET application, you need the Dotnet SDK, version 6.0 or higher. This is crucial for running GRAL simulations as part of the SUMO2GRAL workflow. Instructions for downloading and installing the Dotnet SDK can be found on the official .NET website .","title":"Software Dependencies"},{"location":"prerequisites/#installation-instructions","text":"For Windows Users: You can download the .NET SDK from the Windows .NET 8.0 downloading page and follow the installation prompts. For Linux Users: Most Linux distributions include a package manager that can be used to install the Dotnet SDK. For example, on Ubuntu, you can install the Dotnet SDK with the following command: bash sudo apt-get install -y dotnet-sdk-8.0","title":"Installation Instructions"},{"location":"prerequisites/#additional-python-libraries","text":"SUMO2GRAL utilizes several Python libraries. While these dependencies will be automatically installed during the SUMO2GRAL setup process, it's good to be aware of them: pandas osmnx sumolib numpy geopandas cartopy pyproj osmium These libraries can be installed individually using pip or as part of the SUMO2GRAL setup process, which is detailed in the installation section of the main documentation.","title":"Additional Python Libraries"},{"location":"prerequisites/#sumo-installation","text":"As SUMO2GRAL interacts with SUMO for traffic simulation data, ensure that SUMO (Simulation of Urban MObility) is installed and properly configured on your system. Instructions for installing SUMO can be found on the official SUMO website . Once all prerequisites are met, you can proceed with the installation of SUMO2GRAL and begin setting up your urban pollutant dispersion simulations. If you encounter any issues during the installation or setup process, please refer to the troubleshooting section or reach out to the community for support.","title":"SUMO Installation"},{"location":"project-structure/","text":"Project Structure Understanding the project structure of SUMO2GRAL is crucial for both using the tool effectively and contributing to its development. Below is an overview of the main components and directories in the SUMO2GRAL project. Directory Overview buildings/ : Contains scripts and modules related to processing building data for GRAL simulations. This includes generating shapefiles from OSM data or other sources. buildings_processor.py : The main script responsible for extracting building data and transforming it into a format suitable for GRAL simulations. weather/ : Houses the modules that handle weather data processing to conform to the input requirements of GRAL. weather_processor.py : Script that processes and formats weather data, ensuring it's ready for GRAL simulations. line_emission_sources/ : Contains tools for processing line emission sources, crucial for modeling traffic-related pollution. highway_data_processor.py : Handles the extraction and formatting of highway and road data for use in pollution dispersion modeling with GRAL. maps/ : Includes functionality for generating georeferenced maps, an essential step in visualizing the simulation area and results. maps_processor.py : Script responsible for creating maps based on specified geographic bounds. gral/ : Dedicated to automating the creation of required files for GRAL simulations and running the simulations. gral_processor.py : Central module for generating all necessary GRAL input files and executing the GRAL simulation. local_files_processor/ : Provides tools for processing local file data, allowing for offline data handling and shapefile creation. local_file_processor.py : Manages the processing of local data files to generate shapefiles and other inputs needed for GRAL. main.py : The main entry point for the SUMO2GRAL tool, orchestrating the data processing and simulation based on user inputs. cli.py : Offers a command-line interface for the project, allowing users to specify options and parameters for the simulation process. Key Files requirements.txt : Lists all Python library dependencies required by SUMO2GRAL, ensuring consistent environments across installations. configuration.sumo2gral.cfg : An example configuration file that demonstrates how to specify simulation parameters and paths to necessary data files. Usage and Extension Each directory and script within SUMO2GRAL is designed with a specific purpose in mind, from data processing to simulation execution. Users can interact with SUMO2GRAL primarily through the cli.py script, which provides a user-friendly interface to the tool's functionality. For developers looking to extend SUMO2GRAL's capabilities or integrate new data sources, understanding this structure will be invaluable. The modular design ensures that components can be updated or replaced as needed without impacting the tool's overall functionality. This overview provides a snapshot of the SUMO2GRAL project's structure, designed to facilitate easy navigation and understanding of the tool's components. For more detailed information on each module and its functionalities, refer to the corresponding documentation in the project's repository.","title":"Project Structure"},{"location":"project-structure/#project-structure","text":"Understanding the project structure of SUMO2GRAL is crucial for both using the tool effectively and contributing to its development. Below is an overview of the main components and directories in the SUMO2GRAL project.","title":"Project Structure"},{"location":"project-structure/#directory-overview","text":"buildings/ : Contains scripts and modules related to processing building data for GRAL simulations. This includes generating shapefiles from OSM data or other sources. buildings_processor.py : The main script responsible for extracting building data and transforming it into a format suitable for GRAL simulations. weather/ : Houses the modules that handle weather data processing to conform to the input requirements of GRAL. weather_processor.py : Script that processes and formats weather data, ensuring it's ready for GRAL simulations. line_emission_sources/ : Contains tools for processing line emission sources, crucial for modeling traffic-related pollution. highway_data_processor.py : Handles the extraction and formatting of highway and road data for use in pollution dispersion modeling with GRAL. maps/ : Includes functionality for generating georeferenced maps, an essential step in visualizing the simulation area and results. maps_processor.py : Script responsible for creating maps based on specified geographic bounds. gral/ : Dedicated to automating the creation of required files for GRAL simulations and running the simulations. gral_processor.py : Central module for generating all necessary GRAL input files and executing the GRAL simulation. local_files_processor/ : Provides tools for processing local file data, allowing for offline data handling and shapefile creation. local_file_processor.py : Manages the processing of local data files to generate shapefiles and other inputs needed for GRAL. main.py : The main entry point for the SUMO2GRAL tool, orchestrating the data processing and simulation based on user inputs. cli.py : Offers a command-line interface for the project, allowing users to specify options and parameters for the simulation process.","title":"Directory Overview"},{"location":"project-structure/#key-files","text":"requirements.txt : Lists all Python library dependencies required by SUMO2GRAL, ensuring consistent environments across installations. configuration.sumo2gral.cfg : An example configuration file that demonstrates how to specify simulation parameters and paths to necessary data files.","title":"Key Files"},{"location":"project-structure/#usage-and-extension","text":"Each directory and script within SUMO2GRAL is designed with a specific purpose in mind, from data processing to simulation execution. Users can interact with SUMO2GRAL primarily through the cli.py script, which provides a user-friendly interface to the tool's functionality. For developers looking to extend SUMO2GRAL's capabilities or integrate new data sources, understanding this structure will be invaluable. The modular design ensures that components can be updated or replaced as needed without impacting the tool's overall functionality. This overview provides a snapshot of the SUMO2GRAL project's structure, designed to facilitate easy navigation and understanding of the tool's components. For more detailed information on each module and its functionalities, refer to the corresponding documentation in the project's repository.","title":"Usage and Extension"},{"location":"setup/","text":"Setup Setting up SUMO2GRAL involves a few straightforward steps. This guide will walk you through the process to ensure that you have everything ready for running simulations. Step 1: Clone the Repository Begin by cloning the SUMO2GRAL repository to your local machine. Open your terminal or command prompt and run the following command: git clone https://github.com/seniel98/SUMO2GRAL.git cd SUMO2GRAL This command clones the repository and navigates into the project directory. Step 2: Install Python Dependencies SUMO2GRAL requires several Python libraries to function correctly. These dependencies are listed in the requirements.txt file. To install them, ensure you are in the SUMO2GRAL directory and run: pip install -r requirements.txt This command uses pip, Python's package installer, to install all the necessary libraries. Step 3: Verify .NET SDK Installation Ensure that the .NET SDK is installed on your system by running: dotnet --version This command should return the version of the .NET SDK installed. If you encounter any errors or if the .NET SDK is not installed, please refer back to the Prerequisites section for installation instructions. Step 4: Setting Up the Environment Depending on your operating system, you might need to set environment variables or adjust system settings to ensure that Python and Dotnet commands can be executed from the command line. For Windows users, verify that Python and Dotnet are added to the PATH environment variable. For Linux and macOS users, these should be accessible from the terminal by default, but it's always good to check. Step 5: Running a Test Simulation To verify that everything is set up correctly, you can run a test simulation using the provided example data. Navigate to the examples directory within the SUMO2GRAL repository and run: python ../cli.py -c configuration.sumo2gral.cfg --process all This command will process the example data using the configuration specified in example_configuration.sumo2gral.cfg and run a test simulation. If the simulation completes successfully, your setup is correct. After completing these steps, you should have a fully functional SUMO2GRAL environment ready for running your simulations. For detailed usage instructions and to learn more about the capabilities of SUMO2GRAL, please refer to the Usage section.","title":"Setup"},{"location":"setup/#setup","text":"Setting up SUMO2GRAL involves a few straightforward steps. This guide will walk you through the process to ensure that you have everything ready for running simulations.","title":"Setup"},{"location":"setup/#step-1-clone-the-repository","text":"Begin by cloning the SUMO2GRAL repository to your local machine. Open your terminal or command prompt and run the following command: git clone https://github.com/seniel98/SUMO2GRAL.git cd SUMO2GRAL This command clones the repository and navigates into the project directory.","title":"Step 1: Clone the Repository"},{"location":"setup/#step-2-install-python-dependencies","text":"SUMO2GRAL requires several Python libraries to function correctly. These dependencies are listed in the requirements.txt file. To install them, ensure you are in the SUMO2GRAL directory and run: pip install -r requirements.txt This command uses pip, Python's package installer, to install all the necessary libraries.","title":"Step 2: Install Python Dependencies"},{"location":"setup/#step-3-verify-net-sdk-installation","text":"Ensure that the .NET SDK is installed on your system by running: dotnet --version This command should return the version of the .NET SDK installed. If you encounter any errors or if the .NET SDK is not installed, please refer back to the Prerequisites section for installation instructions.","title":"Step 3: Verify .NET SDK Installation"},{"location":"setup/#step-4-setting-up-the-environment","text":"Depending on your operating system, you might need to set environment variables or adjust system settings to ensure that Python and Dotnet commands can be executed from the command line. For Windows users, verify that Python and Dotnet are added to the PATH environment variable. For Linux and macOS users, these should be accessible from the terminal by default, but it's always good to check.","title":"Step 4: Setting Up the Environment"},{"location":"setup/#step-5-running-a-test-simulation","text":"To verify that everything is set up correctly, you can run a test simulation using the provided example data. Navigate to the examples directory within the SUMO2GRAL repository and run: python ../cli.py -c configuration.sumo2gral.cfg --process all This command will process the example data using the configuration specified in example_configuration.sumo2gral.cfg and run a test simulation. If the simulation completes successfully, your setup is correct. After completing these steps, you should have a fully functional SUMO2GRAL environment ready for running your simulations. For detailed usage instructions and to learn more about the capabilities of SUMO2GRAL, please refer to the Usage section.","title":"Step 5: Running a Test Simulation"},{"location":"usage/","text":"Usage The SUMO2GRAL tool is designed to streamline the process of preparing and running simulations for estimating pollutant concentrations in urban areas. This guide will walk you through the steps to use SUMO2GRAL effectively, covering both offline and online modes, as well as the configuration file mode. Offline Mode In the offline mode, you can process data from local files without the need for an internet connection. This mode is useful when you have already downloaded or have access to the necessary data files. Parameters Mode To run SUMO2GRAL in offline mode using command line parameters, use the following command structure: python cli.py --base-directory /path/to/base/directory --process all --osm-file /path/to/osm/file/file.osm --net-file /path/to/net/file/file.net.xml --emissions-file /path/to/edge/emissions/file/edges-emissions-file.xml --gral-dll /path/to/gral/dll/file/GRAL.dll Replace the placeholders with the actual paths to your base directory, OSM file, SUMO network file, emissions file, and the GRAL DLL file. Configuration File Mode Alternatively, you can use a configuration file to specify all necessary parameters. This approach simplifies the command and makes it easier to reuse configurations. Example command: python cli.py -c configuration.sumo2gral.cfg --process all Refer to the examples/configuration.sumo2gral.cfg file for the structure and options available in the configuration file. Online Mode In online mode, SUMO2GRAL retrieves data using the osmnx library. This mode requires an internet connection to download building, road, and map data. To run SUMO2GRAL in online mode, use the following command: python cli.py --base-directory /path/to/base/directory --north 39.49 --south 39.47 --east -0.37 --west -0.39 --process all --net-file /path/to/net/file/file.net.xml --emissions-file /path/to/edge/emissions/file/edges-emissions-file.xml --online --gral-dll /path/to/gral/dll/file/GRAL.dll Ensure to replace the geographic bounds ( --north , --south , --east , --west ) with the coordinates that define your area of interest. Also, specify the paths to your SUMO network file, emissions file, and the GRAL DLL file. Processing Individual Components SUMO2GRAL allows for processing individual components such as maps, buildings, weather data, highway data, and running GRAL simulations separately. To process a specific component, use the --process argument followed by the component name: For maps: --process map For buildings: --process buildings For weather data: --process weather For highway data: --process highway For GRAL simulation: --process gral Example command to process only buildings in offline mode using an OSM file: python cli.py --base-directory /path/to/base/directory --process buildings --osm-file /path/to/osm/file/file.osm Running GRAL Simulation To execute the GRAL simulation after generating all required files, use the --process gral argument. Ensure all prerequisites are met and the necessary input files are generated and located in the specified base directory. For more detailed information on the command-line arguments and options available in SUMO2GRAL, refer to the CLI documentation or use the --help flag with the cli.py script.","title":"Usage"},{"location":"usage/#usage","text":"The SUMO2GRAL tool is designed to streamline the process of preparing and running simulations for estimating pollutant concentrations in urban areas. This guide will walk you through the steps to use SUMO2GRAL effectively, covering both offline and online modes, as well as the configuration file mode.","title":"Usage"},{"location":"usage/#offline-mode","text":"In the offline mode, you can process data from local files without the need for an internet connection. This mode is useful when you have already downloaded or have access to the necessary data files.","title":"Offline Mode"},{"location":"usage/#parameters-mode","text":"To run SUMO2GRAL in offline mode using command line parameters, use the following command structure: python cli.py --base-directory /path/to/base/directory --process all --osm-file /path/to/osm/file/file.osm --net-file /path/to/net/file/file.net.xml --emissions-file /path/to/edge/emissions/file/edges-emissions-file.xml --gral-dll /path/to/gral/dll/file/GRAL.dll Replace the placeholders with the actual paths to your base directory, OSM file, SUMO network file, emissions file, and the GRAL DLL file.","title":"Parameters Mode"},{"location":"usage/#configuration-file-mode","text":"Alternatively, you can use a configuration file to specify all necessary parameters. This approach simplifies the command and makes it easier to reuse configurations. Example command: python cli.py -c configuration.sumo2gral.cfg --process all Refer to the examples/configuration.sumo2gral.cfg file for the structure and options available in the configuration file.","title":"Configuration File Mode"},{"location":"usage/#online-mode","text":"In online mode, SUMO2GRAL retrieves data using the osmnx library. This mode requires an internet connection to download building, road, and map data. To run SUMO2GRAL in online mode, use the following command: python cli.py --base-directory /path/to/base/directory --north 39.49 --south 39.47 --east -0.37 --west -0.39 --process all --net-file /path/to/net/file/file.net.xml --emissions-file /path/to/edge/emissions/file/edges-emissions-file.xml --online --gral-dll /path/to/gral/dll/file/GRAL.dll Ensure to replace the geographic bounds ( --north , --south , --east , --west ) with the coordinates that define your area of interest. Also, specify the paths to your SUMO network file, emissions file, and the GRAL DLL file.","title":"Online Mode"},{"location":"usage/#processing-individual-components","text":"SUMO2GRAL allows for processing individual components such as maps, buildings, weather data, highway data, and running GRAL simulations separately. To process a specific component, use the --process argument followed by the component name: For maps: --process map For buildings: --process buildings For weather data: --process weather For highway data: --process highway For GRAL simulation: --process gral Example command to process only buildings in offline mode using an OSM file: python cli.py --base-directory /path/to/base/directory --process buildings --osm-file /path/to/osm/file/file.osm","title":"Processing Individual Components"},{"location":"usage/#running-gral-simulation","text":"To execute the GRAL simulation after generating all required files, use the --process gral argument. Ensure all prerequisites are met and the necessary input files are generated and located in the specified base directory. For more detailed information on the command-line arguments and options available in SUMO2GRAL, refer to the CLI documentation or use the --help flag with the cli.py script.","title":"Running GRAL Simulation"},{"location":"buildings/buildings_processor/","text":"Buildings Processor Module The buildings_processor.py module within the SUMO2GRAL project is responsible for processing and generating shapefiles from building data. This data is crucial for GRAL simulations, as it influences the dispersion of pollutants in urban areas. Overview The Buildings Processor takes geographic data about buildings within a specified area and transforms it into a format suitable for GRAL simulations. It primarily deals with extracting building footprints, heights, and other relevant attributes from input data sources. Key Features Data Extraction : Extracts building data from OpenStreetMap or local .osm files, depending on the mode of operation (online or offline). Shapefile Creation : Converts the extracted building data into shapefiles, which are then used by GRAL to model the physical environment of the simulation area. Data Cleaning : Ensures that the building data is clean and consistent, removing any anomalies or errors that could affect the simulation results. Customization : Allows for customization of the data extraction process, enabling users to specify which building attributes to include in the shapefile. Usage The module is designed to be used within the SUMO2GRAL framework. When the cli.py script is run with the appropriate parameters, it invokes the Buildings Processor to generate the necessary shapefiles for GRAL simulations. Example Command python cli.py --base-directory /path/to/base/directory --process buildings --osm-file /path/to/osm/file.osm This command would process building data from the specified OSM file and generate a shapefile in the base directory. Output The output of the Buildings Processor is a shapefile ( .shp ) containing the processed building data. This file includes geometric representations of building footprints, along with any other specified attributes such as building heights ( building:levels ). Customization Users can customize the building data processing by modifying the script or by using command-line arguments to include or exclude specific building attributes. Integration with GRAL The generated shapefiles are directly compatible with GRAL. They are used to define the physical environment within the simulation area, allowing GRAL to accurately model how buildings affect pollutant dispersion. Contributing Contributions to the Buildings Processor module are welcome. Whether it's improving the data processing algorithms, adding new features, or enhancing the documentation, your contributions can help make the SUMO2GRAL project more useful for everyone. Please refer to the contributing.md file for guidelines on how to contribute.","title":"Buildings"},{"location":"buildings/buildings_processor/#buildings-processor-module","text":"The buildings_processor.py module within the SUMO2GRAL project is responsible for processing and generating shapefiles from building data. This data is crucial for GRAL simulations, as it influences the dispersion of pollutants in urban areas.","title":"Buildings Processor Module"},{"location":"buildings/buildings_processor/#overview","text":"The Buildings Processor takes geographic data about buildings within a specified area and transforms it into a format suitable for GRAL simulations. It primarily deals with extracting building footprints, heights, and other relevant attributes from input data sources.","title":"Overview"},{"location":"buildings/buildings_processor/#key-features","text":"Data Extraction : Extracts building data from OpenStreetMap or local .osm files, depending on the mode of operation (online or offline). Shapefile Creation : Converts the extracted building data into shapefiles, which are then used by GRAL to model the physical environment of the simulation area. Data Cleaning : Ensures that the building data is clean and consistent, removing any anomalies or errors that could affect the simulation results. Customization : Allows for customization of the data extraction process, enabling users to specify which building attributes to include in the shapefile.","title":"Key Features"},{"location":"buildings/buildings_processor/#usage","text":"The module is designed to be used within the SUMO2GRAL framework. When the cli.py script is run with the appropriate parameters, it invokes the Buildings Processor to generate the necessary shapefiles for GRAL simulations.","title":"Usage"},{"location":"buildings/buildings_processor/#example-command","text":"python cli.py --base-directory /path/to/base/directory --process buildings --osm-file /path/to/osm/file.osm This command would process building data from the specified OSM file and generate a shapefile in the base directory.","title":"Example Command"},{"location":"buildings/buildings_processor/#output","text":"The output of the Buildings Processor is a shapefile ( .shp ) containing the processed building data. This file includes geometric representations of building footprints, along with any other specified attributes such as building heights ( building:levels ).","title":"Output"},{"location":"buildings/buildings_processor/#customization","text":"Users can customize the building data processing by modifying the script or by using command-line arguments to include or exclude specific building attributes.","title":"Customization"},{"location":"buildings/buildings_processor/#integration-with-gral","text":"The generated shapefiles are directly compatible with GRAL. They are used to define the physical environment within the simulation area, allowing GRAL to accurately model how buildings affect pollutant dispersion.","title":"Integration with GRAL"},{"location":"buildings/buildings_processor/#contributing","text":"Contributions to the Buildings Processor module are welcome. Whether it's improving the data processing algorithms, adding new features, or enhancing the documentation, your contributions can help make the SUMO2GRAL project more useful for everyone. Please refer to the contributing.md file for guidelines on how to contribute.","title":"Contributing"},{"location":"gral/gral_processor/","text":"GRAL Processor Module The gral_processor.py module is a crucial component of the SUMO2GRAL toolkit, designed to streamline the process of preparing input files necessary for running GRAL (Graz Lagrangian Model) simulations. This module automates the generation of various configuration files, ensuring that users can efficiently conduct air quality modeling in urban environments. Overview The GRAL Processor Module simplifies the complex task of setting up GRAL simulations by automating the creation of essential input files. This automation facilitates a more accessible and user-friendly approach to air quality modeling, making it possible for researchers, urban planners, and environmentalists to focus on analysis and interpretation rather than setup intricacies. Key Features Automated File Generation : Generates all required GRAL input files, including the GREB, in.dat, meteogpt.all, and other necessary configuration files. Customization and Flexibility : Allows users to specify simulation parameters such as pollutant types, dispersion time, number of particles per second, and meteorological conditions, tailoring the simulation to their specific needs. Integration with SUMO : Seamlessly processes emissions data from SUMO simulations, translating traffic emissions into inputs for GRAL dispersion modeling. User-friendly Interface : Simplifies the GRAL setup process through a straightforward command-line interface, making advanced dispersion modeling more accessible. Usage The GRAL Processor Module is typically invoked as part of the SUMO2GRAL workflow through the command-line interface (CLI). Users can specify their simulation parameters and trigger the generation of all necessary GRAL input files. Example Command python cli.py --base-directory /path/to/base/directory --process gral --met-file /path/to/met/file/metfile.met --gral-dll /path/to/gral/dll/file/GRAL.dll This command configures the GRAL Processor to generate the required input files for a GRAL simulation based on the specified meteorological data and GRAL DLL file. Output The primary outputs of this module include a set of GRAL-compatible input files that are ready for simulation. These files configure the simulation domain, set the pollutant dispersion parameters, and provide the meteorological context for the dispersion model. Customization The module offers various customization options to adjust the simulation setup according to the user's specific requirements. These options include setting the simulation domain's size, selecting the pollutants of interest, and defining the meteorological conditions for the simulation period. Integration with GRAL Once the necessary input files are generated, they can be directly used to run GRAL simulations. This integration streamlines the workflow from traffic simulation in SUMO to air quality modeling in GRAL, providing a comprehensive toolset for urban environmental analysis. Contributing Contributions to the GRAL Processor Module can enhance its functionality, usability, and compatibility with different simulation scenarios. Proposed enhancements might include support for additional pollutants, improved meteorological data processing, or more detailed customization options. Interested contributors are encouraged to review the contributing.md document for guidelines on how to contribute to the project.","title":"GRAL"},{"location":"gral/gral_processor/#gral-processor-module","text":"The gral_processor.py module is a crucial component of the SUMO2GRAL toolkit, designed to streamline the process of preparing input files necessary for running GRAL (Graz Lagrangian Model) simulations. This module automates the generation of various configuration files, ensuring that users can efficiently conduct air quality modeling in urban environments.","title":"GRAL Processor Module"},{"location":"gral/gral_processor/#overview","text":"The GRAL Processor Module simplifies the complex task of setting up GRAL simulations by automating the creation of essential input files. This automation facilitates a more accessible and user-friendly approach to air quality modeling, making it possible for researchers, urban planners, and environmentalists to focus on analysis and interpretation rather than setup intricacies.","title":"Overview"},{"location":"gral/gral_processor/#key-features","text":"Automated File Generation : Generates all required GRAL input files, including the GREB, in.dat, meteogpt.all, and other necessary configuration files. Customization and Flexibility : Allows users to specify simulation parameters such as pollutant types, dispersion time, number of particles per second, and meteorological conditions, tailoring the simulation to their specific needs. Integration with SUMO : Seamlessly processes emissions data from SUMO simulations, translating traffic emissions into inputs for GRAL dispersion modeling. User-friendly Interface : Simplifies the GRAL setup process through a straightforward command-line interface, making advanced dispersion modeling more accessible.","title":"Key Features"},{"location":"gral/gral_processor/#usage","text":"The GRAL Processor Module is typically invoked as part of the SUMO2GRAL workflow through the command-line interface (CLI). Users can specify their simulation parameters and trigger the generation of all necessary GRAL input files.","title":"Usage"},{"location":"gral/gral_processor/#example-command","text":"python cli.py --base-directory /path/to/base/directory --process gral --met-file /path/to/met/file/metfile.met --gral-dll /path/to/gral/dll/file/GRAL.dll This command configures the GRAL Processor to generate the required input files for a GRAL simulation based on the specified meteorological data and GRAL DLL file.","title":"Example Command"},{"location":"gral/gral_processor/#output","text":"The primary outputs of this module include a set of GRAL-compatible input files that are ready for simulation. These files configure the simulation domain, set the pollutant dispersion parameters, and provide the meteorological context for the dispersion model.","title":"Output"},{"location":"gral/gral_processor/#customization","text":"The module offers various customization options to adjust the simulation setup according to the user's specific requirements. These options include setting the simulation domain's size, selecting the pollutants of interest, and defining the meteorological conditions for the simulation period.","title":"Customization"},{"location":"gral/gral_processor/#integration-with-gral","text":"Once the necessary input files are generated, they can be directly used to run GRAL simulations. This integration streamlines the workflow from traffic simulation in SUMO to air quality modeling in GRAL, providing a comprehensive toolset for urban environmental analysis.","title":"Integration with GRAL"},{"location":"gral/gral_processor/#contributing","text":"Contributions to the GRAL Processor Module can enhance its functionality, usability, and compatibility with different simulation scenarios. Proposed enhancements might include support for additional pollutants, improved meteorological data processing, or more detailed customization options. Interested contributors are encouraged to review the contributing.md document for guidelines on how to contribute to the project.","title":"Contributing"},{"location":"line_emissions_sources/highway_data_processor/","text":"Highway Data Processor Module The highway_data_processor.py module within the SUMO2GRAL framework is dedicated to managing and processing highway and road network data for GRAL simulations. This module plays a pivotal role in converting traffic flow and road geometry information into formats that GRAL can utilize for dispersion modeling, particularly focusing on emissions from vehicular sources. Overview Effective air quality modeling in urban environments requires a detailed representation of traffic emissions, which are primary sources of pollutants. The Highway Data Processor facilitates this by extracting relevant data from SUMO simulations and other sources, preparing it for integration with GRAL's dispersion models. Key Features Data Extraction and Conversion : Gathers and transforms highway and traffic data from SUMO outputs or other traffic simulation tools into a compatible format for GRAL simulations. Emissions Processing : Calculates or processes line source emissions data, essential for modeling vehicular pollution dispersion. Shapefile Generation : Produces shapefiles representing road networks, which can be directly imported into GRAL for spatial analysis and visualization. Customization and Filtering : Offers options to refine and customize the data processing based on specific road types, traffic conditions, or emission factors. Usage This module is typically invoked as part of the broader SUMO2GRAL processing pipeline, where it automatically handles data from designated SUMO output files or specified road network data sources. Example Command python cli.py --base-directory /path/to/base/directory --process highway --net-file /path/to/sumo/network/file.net.xml --emissions-file /path/to/sumo/emissions/file.xml This command triggers the Highway Data Processor to interpret the provided network and emissions files, creating GRAL-compatible outputs that represent the road network and associated vehicular emissions. Output The outputs of this module include: - Line Source Files : Files detailing the geometry and emission rates of roads, formatted for direct use in GRAL simulations. - Shapefiles : Geospatial data files representing the road network, useful for visualizing the simulation domain within GRAL or GIS software. Customization Users can tailor the Highway Data Processor's operation to focus on specific road segments, adjust emission calculation parameters, or filter data based on traffic conditions or vehicle types. These customizations can enhance the accuracy and relevance of the resulting dispersion models. Integration with GRAL The processed highway data, particularly line source emission files, are crucial for GRAL simulations that aim to assess the impact of traffic-related air pollution. These files inform GRAL's models about where and how much pollutants are being emitted, enabling detailed dispersion studies. Contributing Contributions to the Highway Data Processor module can significantly enhance its functionality, accuracy, and user-friendliness. Proposed improvements could involve supporting more data sources, refining emissions calculations, or streamlining data integration with GRAL. For guidance on contributing, please refer to the contributing.md document. Enhancements may include advanced filtering options, integration with real-time traffic data feeds, or automation tools for large-scale urban studies, all aimed at bolstering the module's utility for urban air quality management.","title":"Highway Data Processor Module"},{"location":"line_emissions_sources/highway_data_processor/#highway-data-processor-module","text":"The highway_data_processor.py module within the SUMO2GRAL framework is dedicated to managing and processing highway and road network data for GRAL simulations. This module plays a pivotal role in converting traffic flow and road geometry information into formats that GRAL can utilize for dispersion modeling, particularly focusing on emissions from vehicular sources.","title":"Highway Data Processor Module"},{"location":"line_emissions_sources/highway_data_processor/#overview","text":"Effective air quality modeling in urban environments requires a detailed representation of traffic emissions, which are primary sources of pollutants. The Highway Data Processor facilitates this by extracting relevant data from SUMO simulations and other sources, preparing it for integration with GRAL's dispersion models.","title":"Overview"},{"location":"line_emissions_sources/highway_data_processor/#key-features","text":"Data Extraction and Conversion : Gathers and transforms highway and traffic data from SUMO outputs or other traffic simulation tools into a compatible format for GRAL simulations. Emissions Processing : Calculates or processes line source emissions data, essential for modeling vehicular pollution dispersion. Shapefile Generation : Produces shapefiles representing road networks, which can be directly imported into GRAL for spatial analysis and visualization. Customization and Filtering : Offers options to refine and customize the data processing based on specific road types, traffic conditions, or emission factors.","title":"Key Features"},{"location":"line_emissions_sources/highway_data_processor/#usage","text":"This module is typically invoked as part of the broader SUMO2GRAL processing pipeline, where it automatically handles data from designated SUMO output files or specified road network data sources.","title":"Usage"},{"location":"line_emissions_sources/highway_data_processor/#example-command","text":"python cli.py --base-directory /path/to/base/directory --process highway --net-file /path/to/sumo/network/file.net.xml --emissions-file /path/to/sumo/emissions/file.xml This command triggers the Highway Data Processor to interpret the provided network and emissions files, creating GRAL-compatible outputs that represent the road network and associated vehicular emissions.","title":"Example Command"},{"location":"line_emissions_sources/highway_data_processor/#output","text":"The outputs of this module include: - Line Source Files : Files detailing the geometry and emission rates of roads, formatted for direct use in GRAL simulations. - Shapefiles : Geospatial data files representing the road network, useful for visualizing the simulation domain within GRAL or GIS software.","title":"Output"},{"location":"line_emissions_sources/highway_data_processor/#customization","text":"Users can tailor the Highway Data Processor's operation to focus on specific road segments, adjust emission calculation parameters, or filter data based on traffic conditions or vehicle types. These customizations can enhance the accuracy and relevance of the resulting dispersion models.","title":"Customization"},{"location":"line_emissions_sources/highway_data_processor/#integration-with-gral","text":"The processed highway data, particularly line source emission files, are crucial for GRAL simulations that aim to assess the impact of traffic-related air pollution. These files inform GRAL's models about where and how much pollutants are being emitted, enabling detailed dispersion studies.","title":"Integration with GRAL"},{"location":"line_emissions_sources/highway_data_processor/#contributing","text":"Contributions to the Highway Data Processor module can significantly enhance its functionality, accuracy, and user-friendliness. Proposed improvements could involve supporting more data sources, refining emissions calculations, or streamlining data integration with GRAL. For guidance on contributing, please refer to the contributing.md document. Enhancements may include advanced filtering options, integration with real-time traffic data feeds, or automation tools for large-scale urban studies, all aimed at bolstering the module's utility for urban air quality management.","title":"Contributing"},{"location":"local_files_processor/local_file_processor/","text":"Local File Processor Module The local_file_processor.py module is an integral part of the SUMO2GRAL toolkit, designed to facilitate the handling and processing of local data files for urban simulation environments. This module allows users to import and manipulate local OpenStreetMap (OSM) files and other geographical data formats, providing a seamless transition from local data sources to ready-to-use inputs for both SUMO and GRAL simulations. Overview The Local File Processor Module bridges the gap between raw geographical data and the structured inputs required for effective simulation in SUMO and GRAL. It enables users to leverage local data files, enhancing the accuracy and relevance of urban simulations by incorporating detailed, area-specific information. Key Features OSM File Processing : Converts local OSM files into formats compatible with SUMO and GRAL, ensuring that the road networks, building data, and other geographical features are accurately represented in simulations. Data Customization : Offers tools to refine and customize the imported data, such as selecting specific regions, filtering certain types of data (e.g., buildings, roads), and adjusting attributes to match simulation requirements. Shapefile Generation : Capable of generating shapefiles from local data sources, which can be directly used in GRAL for detailed environmental modeling and analysis. Efficiency and Scalability : Optimized to handle large datasets efficiently, making it suitable for processing comprehensive urban data for large-scale simulations. Usage The Local File Processor Module is typically used at the initial stages of the SUMO2GRAL workflow to prepare geographical data for subsequent simulations. It can be invoked through the CLI with specific parameters to process local data files. Example Command python cli.py --base-directory /path/to/base/directory --process buildings --osm-file /path/to/osm/file/file.osm This command processes a local OSM file to extract building data, preparing it for further use in GRAL simulations as part of the urban environment setup. Output The primary outputs of this module include processed geographical data in formats suitable for SUMO and GRAL simulations. This may encompass road network files for SUMO and shapefiles or other geospatial data formats for GRAL. Integration with SUMO and GRAL The processed data from the Local File Processor Module can be directly integrated into SUMO for traffic simulation and into GRAL for air quality modeling. This integration ensures that the urban simulations are grounded in accurate and specific geographical contexts, leading to more reliable and relevant results. Contributing Enhancements to the Local File Processor Module could include support for additional local data formats, improved data filtering and customization options, or integration with other urban modeling tools. Those interested in contributing are encouraged to review the contributing.md document for guidelines on contributing to the project.","title":"Local Files Processor"},{"location":"local_files_processor/local_file_processor/#local-file-processor-module","text":"The local_file_processor.py module is an integral part of the SUMO2GRAL toolkit, designed to facilitate the handling and processing of local data files for urban simulation environments. This module allows users to import and manipulate local OpenStreetMap (OSM) files and other geographical data formats, providing a seamless transition from local data sources to ready-to-use inputs for both SUMO and GRAL simulations.","title":"Local File Processor Module"},{"location":"local_files_processor/local_file_processor/#overview","text":"The Local File Processor Module bridges the gap between raw geographical data and the structured inputs required for effective simulation in SUMO and GRAL. It enables users to leverage local data files, enhancing the accuracy and relevance of urban simulations by incorporating detailed, area-specific information.","title":"Overview"},{"location":"local_files_processor/local_file_processor/#key-features","text":"OSM File Processing : Converts local OSM files into formats compatible with SUMO and GRAL, ensuring that the road networks, building data, and other geographical features are accurately represented in simulations. Data Customization : Offers tools to refine and customize the imported data, such as selecting specific regions, filtering certain types of data (e.g., buildings, roads), and adjusting attributes to match simulation requirements. Shapefile Generation : Capable of generating shapefiles from local data sources, which can be directly used in GRAL for detailed environmental modeling and analysis. Efficiency and Scalability : Optimized to handle large datasets efficiently, making it suitable for processing comprehensive urban data for large-scale simulations.","title":"Key Features"},{"location":"local_files_processor/local_file_processor/#usage","text":"The Local File Processor Module is typically used at the initial stages of the SUMO2GRAL workflow to prepare geographical data for subsequent simulations. It can be invoked through the CLI with specific parameters to process local data files.","title":"Usage"},{"location":"local_files_processor/local_file_processor/#example-command","text":"python cli.py --base-directory /path/to/base/directory --process buildings --osm-file /path/to/osm/file/file.osm This command processes a local OSM file to extract building data, preparing it for further use in GRAL simulations as part of the urban environment setup.","title":"Example Command"},{"location":"local_files_processor/local_file_processor/#output","text":"The primary outputs of this module include processed geographical data in formats suitable for SUMO and GRAL simulations. This may encompass road network files for SUMO and shapefiles or other geospatial data formats for GRAL.","title":"Output"},{"location":"local_files_processor/local_file_processor/#integration-with-sumo-and-gral","text":"The processed data from the Local File Processor Module can be directly integrated into SUMO for traffic simulation and into GRAL for air quality modeling. This integration ensures that the urban simulations are grounded in accurate and specific geographical contexts, leading to more reliable and relevant results.","title":"Integration with SUMO and GRAL"},{"location":"local_files_processor/local_file_processor/#contributing","text":"Enhancements to the Local File Processor Module could include support for additional local data formats, improved data filtering and customization options, or integration with other urban modeling tools. Those interested in contributing are encouraged to review the contributing.md document for guidelines on contributing to the project.","title":"Contributing"},{"location":"maps/maps_processor/","text":"Maps Processor Module The maps_processor.py module within the SUMO2GRAL toolkit is designed to generate detailed georeferenced maps that serve as a foundational layer for GRAL simulations. These maps incorporate various urban features and provide a spatial context for air quality modeling. Overview Creating accurate air quality models in urban environments necessitates a comprehensive understanding of the urban layout. The Maps Processor module facilitates this by creating detailed maps from geographic data, which can then be used within the GRAL framework to simulate pollutant dispersion across the cityscape. Key Features Georeferenced Map Creation : Produces detailed maps based on geographic coordinates, ensuring that the simulation area is accurately represented in the GRAL model. Integration with Geographic Data Sources : Pulls data from OpenStreetMap or local GIS databases to create maps that reflect the current urban infrastructure. Customizable Detail Level : Allows users to specify the level of detail for the generated maps, accommodating a range of simulation scales from neighborhood to city-wide models. Support for Various Map Layers : Enables the inclusion of multiple layers in the generated maps, such as roads, buildings, vegetation, and water bodies, to provide a comprehensive environmental context for dispersion modeling. Usage This module is typically utilized within the broader SUMO2GRAL processing workflow. It can be triggered via the command line interface to generate maps for specified geographic areas. Example Command python cli.py --base-directory /path/to/base/directory --process map --north 39.49 --south 39.47 --east -0.37 --west -0.39 This command directs the Maps Processor to create a georeferenced map for the specified area, incorporating essential urban features relevant to air quality modeling. Output The primary output of this module is a high-resolution georeferenced map, typically in PNG format, accompanied by a world file (PGW) for spatial referencing. This map can be directly imported into GRAL as a background layer, aiding in the visualization and setup of the simulation domain. Customization Users have the flexibility to tailor the map generation process by adjusting parameters such as the map's scale, resolution, and included layers. This customization capability ensures that the generated maps meet the specific needs of each GRAL simulation. Integration with GRAL The georeferenced maps produced by this module are instrumental in setting up GRAL simulations. They provide a visual and spatial reference that aids in the accurate placement of emission sources, receptors, and other simulation elements within the urban environment. Contributing Enhancements to the Maps Processor module can significantly improve its efficiency, user-friendliness, and compatibility with various geographic data formats. Contributions that introduce new features, optimize existing functionalities, or improve the module's integration with GRAL are highly encouraged. For more information on contributing, please refer to the contributing.md document. Future developments might include advanced GIS functionalities, real-time data integration, or automated updating mechanisms to ensure that the maps reflect the latest urban developments, further enhancing the module's utility for urban planning and environmental management.","title":"Maps"},{"location":"maps/maps_processor/#maps-processor-module","text":"The maps_processor.py module within the SUMO2GRAL toolkit is designed to generate detailed georeferenced maps that serve as a foundational layer for GRAL simulations. These maps incorporate various urban features and provide a spatial context for air quality modeling.","title":"Maps Processor Module"},{"location":"maps/maps_processor/#overview","text":"Creating accurate air quality models in urban environments necessitates a comprehensive understanding of the urban layout. The Maps Processor module facilitates this by creating detailed maps from geographic data, which can then be used within the GRAL framework to simulate pollutant dispersion across the cityscape.","title":"Overview"},{"location":"maps/maps_processor/#key-features","text":"Georeferenced Map Creation : Produces detailed maps based on geographic coordinates, ensuring that the simulation area is accurately represented in the GRAL model. Integration with Geographic Data Sources : Pulls data from OpenStreetMap or local GIS databases to create maps that reflect the current urban infrastructure. Customizable Detail Level : Allows users to specify the level of detail for the generated maps, accommodating a range of simulation scales from neighborhood to city-wide models. Support for Various Map Layers : Enables the inclusion of multiple layers in the generated maps, such as roads, buildings, vegetation, and water bodies, to provide a comprehensive environmental context for dispersion modeling.","title":"Key Features"},{"location":"maps/maps_processor/#usage","text":"This module is typically utilized within the broader SUMO2GRAL processing workflow. It can be triggered via the command line interface to generate maps for specified geographic areas.","title":"Usage"},{"location":"maps/maps_processor/#example-command","text":"python cli.py --base-directory /path/to/base/directory --process map --north 39.49 --south 39.47 --east -0.37 --west -0.39 This command directs the Maps Processor to create a georeferenced map for the specified area, incorporating essential urban features relevant to air quality modeling.","title":"Example Command"},{"location":"maps/maps_processor/#output","text":"The primary output of this module is a high-resolution georeferenced map, typically in PNG format, accompanied by a world file (PGW) for spatial referencing. This map can be directly imported into GRAL as a background layer, aiding in the visualization and setup of the simulation domain.","title":"Output"},{"location":"maps/maps_processor/#customization","text":"Users have the flexibility to tailor the map generation process by adjusting parameters such as the map's scale, resolution, and included layers. This customization capability ensures that the generated maps meet the specific needs of each GRAL simulation.","title":"Customization"},{"location":"maps/maps_processor/#integration-with-gral","text":"The georeferenced maps produced by this module are instrumental in setting up GRAL simulations. They provide a visual and spatial reference that aids in the accurate placement of emission sources, receptors, and other simulation elements within the urban environment.","title":"Integration with GRAL"},{"location":"maps/maps_processor/#contributing","text":"Enhancements to the Maps Processor module can significantly improve its efficiency, user-friendliness, and compatibility with various geographic data formats. Contributions that introduce new features, optimize existing functionalities, or improve the module's integration with GRAL are highly encouraged. For more information on contributing, please refer to the contributing.md document. Future developments might include advanced GIS functionalities, real-time data integration, or automated updating mechanisms to ensure that the maps reflect the latest urban developments, further enhancing the module's utility for urban planning and environmental management.","title":"Contributing"},{"location":"weather/weather_processor/","text":"Weather Processor Module The weather_processor.py module is an essential component of the SUMO2GRAL toolset, designed to streamline the process of preparing meteorological data for GRAL simulations. This module processes weather data to ensure compatibility with GRAL's input requirements, facilitating accurate and efficient pollutant dispersion modeling in urban environments. Overview Weather conditions significantly impact pollutant dispersion patterns. The Weather Processor module extracts and formats relevant meteorological data, such as wind speed, wind direction, and atmospheric stability classes, from various sources to create input files suitable for GRAL simulations. Key Features Data Compatibility : Converts weather data into a format recognized by GRAL, ensuring seamless integration into the simulation workflow. Custom Data Handling : Supports processing of weather data from diverse sources, including local files and standardized meteorological datasets. Parameter Extraction : Extracts key meteorological parameters necessary for dispersion modeling, including wind speed, wind direction, and stability classes. File Generation : Produces .met files that serve as direct input for GRAL, containing processed and formatted weather data. Usage The Weather Processor is invoked automatically when the SUMO2GRAL framework processes weather data. Users can specify the source of the weather data and any relevant parameters through the command-line interface provided by cli.py . Example Command python cli.py --base-directory /path/to/base/directory --process weather --weather-file /path/to/weather/data.csv This command processes the specified weather data file, adapting it for use in GRAL simulations and generating the necessary .met files in the designated base directory. Output The primary output of the Weather Processor module is one or more .met files, each containing formatted meteorological data ready for ingestion by GRAL. These files include information on wind speed, wind direction, and other relevant atmospheric conditions for each time step of the simulation. Customization Users can customize the weather data processing to suit specific needs, such as adjusting for local climatic conditions or focusing on particular atmospheric parameters. Modifications can be made directly within the module's code or through command-line arguments that alter the processing behavior. Integration with GRAL The formatted .met files produced by the Weather Processor are essential inputs for GRAL simulations. They provide the atmospheric boundary conditions that GRAL uses to model pollutant dispersion, making accurate weather data processing critical for reliable simulation outcomes. Contributing Enhancements, bug fixes, and improvements to the Weather Processor module are welcomed. Contributions that increase the module's flexibility, accuracy, or usability can significantly benefit the SUMO2GRAL user community. For contribution guidelines, please refer to the contributing.md document. Contributions can include adding support for additional weather data formats, improving data accuracy through advanced processing techniques, or enhancing the user interface for easier module customization.","title":"Weather"},{"location":"weather/weather_processor/#weather-processor-module","text":"The weather_processor.py module is an essential component of the SUMO2GRAL toolset, designed to streamline the process of preparing meteorological data for GRAL simulations. This module processes weather data to ensure compatibility with GRAL's input requirements, facilitating accurate and efficient pollutant dispersion modeling in urban environments.","title":"Weather Processor Module"},{"location":"weather/weather_processor/#overview","text":"Weather conditions significantly impact pollutant dispersion patterns. The Weather Processor module extracts and formats relevant meteorological data, such as wind speed, wind direction, and atmospheric stability classes, from various sources to create input files suitable for GRAL simulations.","title":"Overview"},{"location":"weather/weather_processor/#key-features","text":"Data Compatibility : Converts weather data into a format recognized by GRAL, ensuring seamless integration into the simulation workflow. Custom Data Handling : Supports processing of weather data from diverse sources, including local files and standardized meteorological datasets. Parameter Extraction : Extracts key meteorological parameters necessary for dispersion modeling, including wind speed, wind direction, and stability classes. File Generation : Produces .met files that serve as direct input for GRAL, containing processed and formatted weather data.","title":"Key Features"},{"location":"weather/weather_processor/#usage","text":"The Weather Processor is invoked automatically when the SUMO2GRAL framework processes weather data. Users can specify the source of the weather data and any relevant parameters through the command-line interface provided by cli.py .","title":"Usage"},{"location":"weather/weather_processor/#example-command","text":"python cli.py --base-directory /path/to/base/directory --process weather --weather-file /path/to/weather/data.csv This command processes the specified weather data file, adapting it for use in GRAL simulations and generating the necessary .met files in the designated base directory.","title":"Example Command"},{"location":"weather/weather_processor/#output","text":"The primary output of the Weather Processor module is one or more .met files, each containing formatted meteorological data ready for ingestion by GRAL. These files include information on wind speed, wind direction, and other relevant atmospheric conditions for each time step of the simulation.","title":"Output"},{"location":"weather/weather_processor/#customization","text":"Users can customize the weather data processing to suit specific needs, such as adjusting for local climatic conditions or focusing on particular atmospheric parameters. Modifications can be made directly within the module's code or through command-line arguments that alter the processing behavior.","title":"Customization"},{"location":"weather/weather_processor/#integration-with-gral","text":"The formatted .met files produced by the Weather Processor are essential inputs for GRAL simulations. They provide the atmospheric boundary conditions that GRAL uses to model pollutant dispersion, making accurate weather data processing critical for reliable simulation outcomes.","title":"Integration with GRAL"},{"location":"weather/weather_processor/#contributing","text":"Enhancements, bug fixes, and improvements to the Weather Processor module are welcomed. Contributions that increase the module's flexibility, accuracy, or usability can significantly benefit the SUMO2GRAL user community. For contribution guidelines, please refer to the contributing.md document. Contributions can include adding support for additional weather data formats, improving data accuracy through advanced processing techniques, or enhancing the user interface for easier module customization.","title":"Contributing"}]}